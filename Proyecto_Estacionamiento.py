# -*- coding: utf-8 -*-
"""EVALUACION CURSO PYTHON UNAHUR (RAVERA SANTIAGO.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XQVflhQQaScsd1m1nXDl6xvRv9Cr_Euq

Dada la creciente demanda de autos en el estacionamiento de UNAHUR por el regreso a las clases presenciales, la universidad nos solicitó ayuda para comenzar a tarifar el estacionamiento.

El estacionamiento tiene una capacidad máxima en general, y a su vez tiene sectores que tienen su propia capacidad.

El sector docente tiene 50 lugares y cuesta $10 la hora.

El sector de alumnos tiene 50 lugares y cuesta $5 la hora.

Y el sector general, que tiene 100 lugares, cuesta $20 la hora. Tener en cuenta las siguientes especificaciones:

a) Cada vez que ingresa un auto al estacionamiento, se registra la matrícula, la hora de ingreso y el sector en donde se estaciona.

b) No se puede exceder la capacidad y se debe arrojar una excepción si esto ocurre.

c) Cuando un auto sale, se registra su hora de salida.

d) No se debe ingresar un auto que esté actualmente en el estacionamiento. Se debe lanzar una excepción.

e) El estacionamiento, en algún momento, deberá poder responder cuánto dinero recaudó.

Se pide Modelar el TDA Estacionamiento, escribiendo la interfaz pública de todos los TDAs involucrados.

En la interfaz se deben indicar de manera prolija los atributos y las operaciones, usando nombres declarativos e incluyendo una breve explicación de cada una. Se puede entregar un txt/pdf adicional al código con esta información.

Tener en cuenta que se debe poder:

I. Registrar el ingreso de un auto con los datos indicados previamente.

II. Consultar si un auto está en el estacionamiento para una hora determinada.

III. Registrar la salida de un auto con los datos indicados.

IV. Calcular el dinero recaudado. Esta operación se debe resolver lo más rápido posible

Para lo anterior, se pide:

Escribir la interfaz pública de los TDAs involucrados (nombre, atributos y operaciones principales de cada uno).
Implementar los métodos para poder responder las operaciones I...IV indicadas en el enunciado.
"""

# Creamos el TDA Vehiculo donde guardaremos los datos que necesitamos
# SECTOR - PATENTE - HORA DE INGRESO - HORA DE SALIDA

class Vehiculo:
  sector = None
  patente = None
  hora_ingreso = None
  hora_salida = None

  # Con el pass hacemos que el programa siga avanzando y ejecutando lo que sigue	
  def __init__(self):
    pass

# Creamos el TDA Estacionamiento donde guardaremos los datos que necesitamos
# SECTORES (DOCENTE-ALUMNO-GENERAL) - CAPACIDAD GENERAL - OCUPACION - SECTORES (LISTA) - VEHICULOS REGISTRADOS (LISTA) - RECAUDACION

class Estacionamiento:
  SECTORES = ['docente', 'alumno', 'general']
  capacidadGeneral = 0
  ocupacion = 0
  sectores = {}
  vehiculosRegistrados = {}
  recaudacion = 0

  # Armamos el constructor donde determinamos la capacidad general (TOTAL) y la repartimos de acuerdo al enunciado, como tambien se hace lo mismo con el costo de cada sector

  def __init__(self) -> None:
    self.capacidadGeneral = 200
    self.sectores = {
      'docente': {'capacidad':50,'ocupados':0,'costo':10},
      'alumno': {'capacidad':50,'ocupados':0,'costo':5},
      'general': {'capacidad':100,'ocupados':0,'costo':20},}

  # Definimos funcion para ingresar vehiculos al estacionamiento. La cual chequea que el sector seleccionado tenga capacidad y si hay lugar, lo registra y le muestra al usuario 
  # La información de dicho vehiculo (SECTOR-PATENTE-HORA DE INGRESO)
  # Tambien comprueba que el auto no se encuentre ya estacionado (Chequeandolo mediante las patentes guardadas en sistema)

  def ingresar_vehiculo(self, vehiculo:Vehiculo) -> None:
      if self.sectores[vehiculo.sector]['ocupados'] < self.sectores[vehiculo.sector]['capacidad'] and self.ocupacion < self.capacidadGeneral:
        if vehiculo.patente not in self.vehiculosRegistrados.keys():
          self.vehiculosRegistrados[vehiculo.patente] = vehiculo
          self.sectores[vehiculo.sector]['ocupados'] += 1
          self.ocupacion += 1
          print(f" \n Ingresa al sector {vehiculo.sector} el auto con la patente {vehiculo.patente} a las {vehiculo.hora_ingreso} hs \n =========================================== ")
        else:
          print(f" \n El auto con la patente {vehiculo.patente} ya se encuentra en el estacionamiento \n =========================================== ")
      else:
        print(f" \n El estacionamiento ya se encuentra lleno. \n ===========================================")

  # Definimos funcion para registrar la salida de vehiculos al estacionamiento. La cual ingresa un parametro para que la hora de salida siempre sea mayor a la hora de ingreso, para despues de eso
  # Registrar la salida del vehiculo mostrandole al usario la hora de ingreso, la hora de salida de dicho vehiculo y el monto que debera abonar de acuerdo al tiempo que haya estado estacionado.
  # Tambien comprueba que el auto no se encuentre ya estacionado (Chequeandolo mediante las patentes guardadas en sistema)

  def salida_vehiculo(self, patente:str, hora_salida:int) -> None:
    if patente in self.vehiculosRegistrados.keys():
      vehiculo = self.vehiculosRegistrados[patente]
      while hora_salida <= vehiculo.hora_ingreso:
          hora_salida = int(input(f"La hora de salida ({hora_salida}) debe ser mayor a la hora de ingreso ({vehiculo.hora_ingreso}). \n Indique la hora correcta: \n =========================================== "))
        

      vehiculo.hora_salida= hora_salida
      self.vehiculosRegistrados[patente] = vehiculo
      self.sectores[vehiculo.sector]['ocupados'] -= 1
      self.ocupacion -= 1
      print(f"\n El auto con la patente {vehiculo.patente} ingresó a las {vehiculo.hora_ingreso} hs y sale a las {vehiculo.hora_salida} hs. \n ===========================================")   
      pago = (vehiculo.hora_salida - vehiculo.hora_ingreso) * self.sectores[vehiculo.sector]['costo']
      self.recaudacion += pago

      self.vehiculosRegistrados.pop(patente)
    else:
      print(f"\n El vehiculo con la patente {patente} no se encuentra en el estacionamiento \n ===========================================")


  # Definimos funcion para buscar vehiculo dentro del estacionamiento.
  # La funcion se encarga de comprobar los vehiculos registrados en el sistema, a traves de la patente. 
  # Mostrandole al usuario (PATENTE-SECTOR-HORA DE INGRESO) y tambien si no encuentra la patente devuelve la respuesta que "no se encuentra en el estacionamiento". 

  def buscar_vehiculo(self, patente:str) -> None:
    if patente in self.vehiculosRegistrados.keys():
      vehiculo = self.vehiculosRegistrados[patente]
      print(f"\n El vehículo con la patente {vehiculo.patente} se encuentra en el sector {vehiculo.sector} desde las {vehiculo.hora_ingreso} hs. \n ===========================================")
    else:
      print(f"\n El vehiculo con la patente {patente} no se encuentra en el estacionamiento. \n ===========================================")
    
  # Definimos funcion para calcular recaudacion total del estacionamiento, la cual se fue sumando a medida que los autos salian del estacionamiento.

  def recaudacion_total(self) -> int:
    return self.recaudacion

# LADO DEL USUARIO
def main():
  lugarDeEstacionamiento = Estacionamiento()
  menu = "ESTACIONAMIENTO\n1- Ingreso de vehículo\n2- Salida de vehículo\n3- Buscar vehículo\n4- Mostrar recaudación estacionamiento\n5- Salir \n ==========================================="

  flag = True

  while flag:
    print(menu)

    opcion = int(input("Indique la opción deseada: \n =========================================== \n "))

    if opcion == 1:
      vehiculo = Vehiculo()
      sector_usuario = int(input(" =========================================== \n Indique el sector donde estacionará el vehículo:\n \n1- Docentes\n2- Alumnos\n3- General \n \n Indique su opción: \n =========================================== \n "))		
      while sector_usuario < 1 or sector_usuario > 3:
          sector_usuario = int(input("\n Indique una opción válida: \n =========================================== "))
      vehiculo.sector = lugarDeEstacionamiento.SECTORES[sector_usuario - 1]
      vehiculo.patente = input(" =========================================== \n Indique la patente de su vehículo: \n ===========================================\n ")
      vehiculo.hora_ingreso = int(input(" =========================================== \n Indique la hora de ingreso del vehículo: \n ===========================================\n "))
      lugarDeEstacionamiento.ingresar_vehiculo(vehiculo)
    elif opcion == 2:
      patente = input(" =========================================== \n Indique la patente del vehículo que desea retirar: \n ===========================================\n ")
      hora_salida = int(input(" =========================================== \n Indique la hora de salida del vehículo: \n ===========================================\n "))
      lugarDeEstacionamiento.salida_vehiculo(patente, hora_salida)
    elif opcion == 3:
      patente = input(" =========================================== \n Indique la patente del vehículo que desea buscar: \n ===========================================\n ")
      lugarDeEstacionamiento.buscar_vehiculo(patente)
    elif opcion == 4:
      print(f" =========================================== \n Al momento se ha recaudado $ {lugarDeEstacionamiento.recaudacion_total()} PESOS \n ===========================================\n")
    elif opcion == 5:
      flag = False


if __name__ == '__main__':
  main()